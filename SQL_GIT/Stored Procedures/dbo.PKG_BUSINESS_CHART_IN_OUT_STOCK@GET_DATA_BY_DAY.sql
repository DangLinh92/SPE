SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE PROC [dbo].[PKG_BUSINESS_CHART_IN_OUT_STOCK@GET_DATA_BY_DAY]
@A_TYPE_TIME NVARCHAR(10),
@A_TYPE_VALUE NVARCHAR(50),
@A_FROM NVARCHAR(50),
@A_TO  NVARCHAR(50),
@A_DEPARTMENT    NVARCHAR(100),
@A_SPARE_PART_CODE NVARCHAR(50),
@N_RETURN			int				OUTPUT,
@V_RETURN			NVARCHAR(4000)	OUTPUT
AS
BEGIN TRY
  	BEGIN
		    SET NOCOUNT OFF;  
			BEGIN TRAN;
           IF @A_TYPE_VALUE = 'MONEY' -- k can thiet
				BEGIN
					 IF @A_TYPE_TIME = 'DAY' -- k can thiet
						BEGIN
								DECLARE @FROM_DAY DATE
								DECLARE @TO_DAY DATE

								SET @FROM_DAY = CAST(@A_FROM AS DATE)
								SET @TO_DAY = CAST(@A_TO AS DATE)

								PRINT @FROM_DAY
								PRINT @TO_DAY

								-- CACULATOR VALUE MONEY ---
								DECLARE @IN_VALUES_OF_DATE_VN FLOAT = 0
								DECLARE @OUT_VALUES_OF_DATE_VN FLOAT = 0
								DECLARE @IN_VALUES_OF_DATE_US FLOAT = 0
								DECLARE @OUT_VALUES_OF_DATE_US FLOAT = 0
								DECLARE @INVENTORY_VALUES_US FLOAT = 0
								DECLARE @INVENTORY_VALUES_VN FLOAT = 0

							   --- DECLARE IN VALUE ---
								DECLARE @LOCAL_DATA_IN TABLE
								(
									VALUES_IN_VN FLOAT,
									VALUES_IN_US FLOAT,
									DATE_IN DATE 
								)

							  DECLARE @PACK_UNIT NVARCHAR(50) = 'PACK'

							  INSERT INTO @LOCAL_DATA_IN
							 SELECT  SUM((ISNULL(dbo.CONVERT_UNIT(ehi.UNIT,@PACK_UNIT,@A_SPARE_PART_CODE,@A_DEPARTMENT)* Ehi.QUANTITY,0) - ISNULL(dbo.CONVERT_UNIT(ehi.UNIT,@PACK_UNIT,@A_SPARE_PART_CODE,@A_DEPARTMENT) *EHI.QUANTITY_NG,0) - CASE WHEN STIN.IS_INTEGRATED = 'True' THEN ISNULL(STIN.QUANTITY * dbo.CONVERT_UNIT(STIN.UNIT_CODE,@PACK_UNIT,@A_SPARE_PART_CODE,@A_DEPARTMENT) ,0) ELSE 0 END)* ISNULL(SUB.PRICE_VN,0)) AS IN_VN,
									 SUM((ISNULL(dbo.CONVERT_UNIT(ehi.UNIT,@PACK_UNIT,@A_SPARE_PART_CODE,@A_DEPARTMENT) * EHI.QUANTITY,0) - ISNULL(dbo.CONVERT_UNIT(ehi.UNIT,@PACK_UNIT,@A_SPARE_PART_CODE,@A_DEPARTMENT)*EHI.QUANTITY_NG,0) - CASE WHEN STIN.IS_INTEGRATED = 'True' THEN ISNULL(STIN.QUANTITY * dbo.CONVERT_UNIT(STIN.UNIT_CODE,@PACK_UNIT,@A_SPARE_PART_CODE,@A_DEPARTMENT) ,0) ELSE 0 END)* ISNULL(SUB.PRICE_US,0)) AS OU_VN,
									  EHI.DATE
							 FROM EWIP_HISTORY_INVENTORY ehi
							 LEFT JOIN [dbo].[EWIP_INVENTORY_DELIVERY_RECEIVING] IDR ON ehi.STOCK_IN_OUT_CODE = IDR.CODE_NO AND EHI.DEPT_CODE = IDR.DEPT_CODE AND IDR.STATUS = 'COMPLETE'
							 INNER JOIN [dbo].[EWIP_SP_STOCKIN] STIN ON ehi.STOCK_IN_OUT_CODE = stin.STOCK_IN_CODE AND EHI.SPARE_PART_CODE = STIN.SPARE_PART_CODE AND EHI.DEPT_CODE = STIN.DEPT_CODE
							 --LEFT JOIN (
								--		  SELECT EO.PO_ID AS PO_NO,eprd.SPAREPART_CODE ,'PACK' as UNIT,eprd.DEPT_CODE,
								--		  eprd.PRICE_VN/[dbo].[CONVERT_UNIT](eprd.UNIT,@PACK_UNIT,eprd.SPAREPART_CODE,@A_DEPARTMENT) AS PRICE_VN,
								--		  eprd.PRICE_US/[dbo].[CONVERT_UNIT](eprd.UNIT,@PACK_UNIT,eprd.SPAREPART_CODE,@A_DEPARTMENT) AS PRICE_US
								--		  FROM EWIP_ORDER eo
								--		  INNER JOIN EWIP_ORDER_PR eop ON EO.PO_ID_TEMP = eop.PO_ID_TEMP
								--		  INNER JOIN EWIP_PURCHASE_REQUEST epr ON EOP.PR_CODE = EPR.PR_CODE AND EOP.DEPT_CODE = EPR.DEPT_CODE
								--		  INNER JOIN EWIP_PURCHASE_REQUEST_DETAIL eprd ON EPR.PR_CODE = eprd.PR_CODE AND EPR.DEPT_CODE = eprd.DEPT_CODE
								--		) SUB2 ON SUB2.SPAREPART_CODE = EHI.SPARE_PART_CODE AND SUB2.DEPT_CODE = EHI.DEPT_CODE AND SUB2.PO_NO = IDR.ORDER_CODE
							 --LEFT JOIN (SELECT
							 --             SPARE_PART_CODE,
							 --             [PRICE_VN]/[dbo].[CONVERT_UNIT](UNIT,@PACK_UNIT,[SPARE_PART_CODE],@A_DEPARTMENT) AS PRICE_VN,
								--		  [PRICE_US]/[dbo].[CONVERT_UNIT](UNIT,@PACK_UNIT,[SPARE_PART_CODE],@A_DEPARTMENT)  AS PRICE_US,
								--		  DATE
							 --           FROM [dbo].[EWIP_INVENTORY_BY_TIME]
								--		WHERE SPARE_PART_CODE = @A_SPARE_PART_CODE AND DEPT_CODE = @A_DEPARTMENT
								--		) AS SUB3 ON SUB3.SPARE_PART_CODE = ehi.SPARE_PART_CODE AND MONTH(EHI.DATE) = MONTH(SUB3.DATE) AND YEAR(EHI.DATE) = YEAR(SUB3.DATE)
							 LEFT JOIN (SELECT TOP 1 WITH TIES 
											[SPARE_PART_CODE],
											[PRICE_VN]/[dbo].[CONVERT_UNIT]([UNIT_CODE],@PACK_UNIT,[SPARE_PART_CODE],@A_DEPARTMENT) AS [PRICE_VN],
											[PRICE_US]/[dbo].[CONVERT_UNIT]([UNIT_CODE],@PACK_UNIT,[SPARE_PART_CODE],@A_DEPARTMENT) AS [PRICE_US], 
											@PACK_UNIT AS UNIT
											FROM [dbo].[EWIP_SPAREPART_PRICE] 
											WHERE [DEPT_CODE] = @A_DEPARTMENT AND SPARE_PART_CODE = @A_SPARE_PART_CODE
											ORDER BY ROW_NUMBER() OVER(PARTITION BY SPARE_PART_CODE ORDER BY [DATE] DESC)) SUB ON SUB.SPARE_PART_CODE = EHI.SPARE_PART_CODE
							 WHERE 
							    ehi.IN_OUT = 'IN' AND ehi.DEPT_CODE = @A_DEPARTMENT 
								AND ehi.SPARE_PART_CODE = @A_SPARE_PART_CODE AND EHI.DATE BETWEEN @FROM_DAY AND @TO_DAY
							 GROUP BY ehi.SPARE_PART_CODE,EHI.DATE

							MERGE [dbo].[EWIP_INVENTORY_QTY_VALUE_BY_DAY] AS TARGET
							USING @LOCAL_DATA_IN AS SOURCE
							ON 
							(
								TARGET.SPARE_PART_CODE = @A_SPARE_PART_CODE AND
								TARGET.DATE = SOURCE.DATE_IN
							)
							WHEN MATCHED 
							    THEN UPDATE SET TARGET.IN_VALUES_VN = SOURCE.VALUES_IN_VN,TARGET.IN_VALUES_US = SOURCE.VALUES_IN_US,TARGET.UNIT = @PACK_UNIT,SYS_TIME = SYSDATETIME()
							WHEN NOT MATCHED BY TARGET
							    THEN INSERT([SPARE_PART_CODE],[DEPT_CODE],[STOCK_CODE],[DATE],[IN_VALUES_VN],[OUT_VALUES_VN],[INVENTORY_VALUES_VN],[IN_VALUES_US],[OUT_VALUES_US],[INVENTORY_VALUES_US],[QUANTITY_IN],[QUANTITY_OUT],[QUANTITY_INVENTORY],[QTY_INVENTORY_INCLUDE],[SYS_TIME],[UNIT],WEEK,QUARTER)
									 VALUES(@A_SPARE_PART_CODE
									 ,@A_DEPARTMENT,
									 'SMT_K1',
									 SOURCE.DATE_IN,
									 SOURCE.VALUES_IN_VN,
									 0,
									 0,
									 SOURCE.VALUES_IN_US
									 ,0,
									 0,
									 0,
									 0,
									 0,
									 0,
									 SYSDATETIME(),
									 @PACK_UNIT,
									 DATEPART(WEEK,SOURCE.DATE_IN),
									 DATEPART(QUARTER,SOURCE.DATE_IN));


							 DECLARE @LOCAL_QTY_IN TABLE
							 (
								QUANTITY FLOAT,
								DATE_IN DATE 
							 )

							  -- TINH SO LUONG NHAP
							INSERT INTO @LOCAL_QTY_IN
							SELECT SUM([dbo].[CONVERT_UNIT](STIN.UNIT_CODE,@PACK_UNIT,STIN.SPARE_PART_CODE,@A_DEPARTMENT) * ISNULL(STIN.QUANTITY,0)),HIS.DATE
							FROM EWIP_HISTORY_INVENTORY HIS
							INNER JOIN [dbo].[EWIP_SP_STOCKIN] STIN ON HIS.STOCK_IN_OUT_CODE = STIN.STOCK_IN_CODE AND STIN.SPARE_PART_CODE = HIS.SPARE_PART_CODE
							WHERE HIS.SPARE_PART_CODE = @A_SPARE_PART_CODE AND HIS.DEPT_CODE = @A_DEPARTMENT AND 
							      HIS.DATE BETWEEN @FROM_DAY AND @TO_DAY
							GROUP BY HIS.SPARE_PART_CODE,HIS.DATE

							MERGE [dbo].[EWIP_INVENTORY_QTY_VALUE_BY_DAY] AS TARGET
							USING @LOCAL_QTY_IN AS SOURCE
							ON 
							(
								TARGET.SPARE_PART_CODE = @A_SPARE_PART_CODE AND
								TARGET.DATE = SOURCE.DATE_IN
							)
							WHEN MATCHED 
							    THEN UPDATE SET TARGET.QUANTITY_IN = SOURCE.QUANTITY,TARGET.UNIT = @PACK_UNIT,SYS_TIME = SYSDATETIME()
							WHEN NOT MATCHED BY TARGET
							    THEN INSERT([SPARE_PART_CODE],[DEPT_CODE],[STOCK_CODE],[DATE],[IN_VALUES_VN],[OUT_VALUES_VN],[INVENTORY_VALUES_VN],[IN_VALUES_US],[OUT_VALUES_US],[INVENTORY_VALUES_US],[QUANTITY_IN],[QUANTITY_OUT],[QUANTITY_INVENTORY],[QTY_INVENTORY_INCLUDE],[SYS_TIME],[UNIT],WEEK,QUARTER)
									 VALUES(@A_SPARE_PART_CODE,
									 @A_DEPARTMENT,
									 'SMT_K1',
									 SOURCE.DATE_IN,
									 0,
									 0,
									 0,
									 0,
									 0,
									 0,
									 SOURCE.QUANTITY,
									 0,
									 0,
									 0,
									 SYSDATETIME(),
									 @PACK_UNIT,DATEPART(WEEK,SOURCE.DATE_IN),DATEPART(QUARTER,SOURCE.DATE_IN));

							 --- DECLARE OUT VALUE ---
							 DECLARE @LOCAL_DATA_OUT TABLE
							 (
								VALUES_OUT_VN FLOAT,
								VALUES_OUT_US FLOAT,
								DATE_OUT DATE 
							 )

							 -- TINH GIA TRI OUT --
							 DECLARE @LOCATION_OUT NVARCHAR(MAX)
							 DECLARE @QUANTITY_OUT_SP FLOAT = 0
							 DECLARE @UNIT_OUT NVARCHAR(50)
							 DECLARE @VALUES_OUT_VN FLOAT = 0
							 DECLARE @VALUES_OUT_US FLOAT = 0
							 DECLARE @A_TMP_LOCATION NVARCHAR(MAX)
							 DECLARE @CHECK_COUNT INT
							 DECLARE @DATE_OUT DATE
							 
							 DECLARE @A_TMP_L NVARCHAR(100)
							 DECLARE @A_TMP_Q NVARCHAR(20)
							 DECLARE @A_TMP_C NVARCHAR(50)
							 DECLARE @A_TMP_EX NVARCHAR(50)
							 DECLARE @A_TMP_IT NVARCHAR(50)
							 DECLARE @A_TMP_UNIT NVARCHAR(20)
							 DECLARE @A_TMP_PO_NO NVARCHAR(50)
							 DECLARE @A_PRICE_US_TMP FLOAT = 0
							 DECLARE @A_PRICE_VN_TMP FLOAT = 0
							 
							 DECLARE cursorOutSparepart CURSOR FAST_FORWARD READ_ONLY LOCAL FOR
							 SELECT eso.LOCATION,eso.QUANTITY,eso.UNIT_ID AS UNIT,ESO.DATE
							 FROM EWIP_STOCK_OUT eso  
							 		INNER JOIN EWIP_INVENTORY_DELIVERY_RECEIVING eidr ON eso.STOCK_OUT_CODE = eidr.CODE_NO
							 WHERE 
							 	ESO.SPARE_PART_CODE = @A_SPARE_PART_CODE AND 
							 	ESO.DEPT_CODE = @A_DEPARTMENT AND 
							 	ESO.DATE BETWEEN @FROM_DAY AND @TO_DAY
							 
							  OPEN cursorOutSparepart
							 
							  FETCH NEXT FROM cursorOutSparepart
							  INTO @LOCATION_OUT,@QUANTITY_OUT_SP,@UNIT_OUT,@DATE_OUT

								WHILE @@FETCH_STATUS = 0
									 BEGIN
									        
											PRINT @LOCATION_OUT
											PRINT @QUANTITY_OUT_SP
											PRINT @DATE_OUT


											DECLARE cursorOutSub CURSOR FAST_FORWARD READ_ONLY LOCAL FOR
											SELECT value FROM STRING_SPLIT(@LOCATION_OUT,',')

											OPEN cursorOutSub

											FETCH NEXT FROM cursorOutSub
											INTO @A_TMP_LOCATION

											WHILE @@FETCH_STATUS = 0
											  BEGIN
													SELECT @CHECK_COUNT = COUNT(value)
													from 
													STRING_SPLIT(@A_TMP_LOCATION,'_')
											
													IF @CHECK_COUNT = 7
													  BEGIN
															SET @A_TMP_L = SUBSTRING(@A_TMP_LOCATION,1,CHARINDEX('_',@A_TMP_LOCATION) - 1)
															SET @A_TMP_Q = SUBSTRING(@A_TMP_LOCATION,LEN(@A_TMP_L)+2,CHARINDEX('_',@A_TMP_LOCATION,LEN(@A_TMP_L)+2)-LEN(@A_TMP_L)- 2)
															SET @A_TMP_C = SUBSTRING(@A_TMP_LOCATION,LEN(@A_TMP_L + '_'+@A_TMP_Q) + 2,CHARINDEX('_',@A_TMP_LOCATION,LEN(@A_TMP_L + '_'+@A_TMP_Q)+2) - LEN(@A_TMP_L + '_'+@A_TMP_Q) - 2)
															SET @A_TMP_EX = SUBSTRING(@A_TMP_LOCATION,LEN(@A_TMP_L + '_'+@A_TMP_Q + '_'+@A_TMP_C) + 2,CHARINDEX('_',@A_TMP_LOCATION,LEN(@A_TMP_L + '_'+@A_TMP_Q + '_'+@A_TMP_C)+2) - LEN(@A_TMP_L + '_'+@A_TMP_Q + '_'+@A_TMP_C) - 2)
															SET @A_TMP_IT = SUBSTRING(@A_TMP_LOCATION,LEN(@A_TMP_L + '_'+@A_TMP_Q + '_'+@A_TMP_C + '_' + @A_TMP_EX) + 2,
															                                          CHARINDEX('_',@A_TMP_LOCATION,LEN(@A_TMP_L + '_'+@A_TMP_Q + '_'+@A_TMP_C + '_' + @A_TMP_EX)+2) - LEN(@A_TMP_L + '_'+@A_TMP_Q + '_'+@A_TMP_C + '_' + @A_TMP_EX) - 2)

															SET @A_TMP_UNIT = SUBSTRING(@A_TMP_LOCATION,
															                           LEN(@A_TMP_L + '_'+@A_TMP_Q + '_'+@A_TMP_C + '_' + @A_TMP_EX + '_' + @A_TMP_IT) + 2,
																					   CHARINDEX('_',@A_TMP_LOCATION,LEN(@A_TMP_L + '_'+@A_TMP_Q + '_'+@A_TMP_C + '_' + @A_TMP_EX + '_' + @A_TMP_IT)+2) - LEN(@A_TMP_L + '_'+@A_TMP_Q + '_'+@A_TMP_C + '_' + @A_TMP_EX + '_' + @A_TMP_IT) - 2)

															SET @A_TMP_PO_NO = SUBSTRING(@A_TMP_LOCATION,LEN(@A_TMP_L + '_'+@A_TMP_Q + '_'+@A_TMP_C + '_' + @A_TMP_EX + '_' + @A_TMP_IT + '_' + @A_TMP_UNIT) + 2,LEN(@A_TMP_LOCATION) - LEN(@A_TMP_L + '_'+@A_TMP_Q + '_'+@A_TMP_C + '_' + @A_TMP_EX + '_' + @A_TMP_IT + '_' + @A_TMP_UNIT) - 1)
															   
															SET @A_PRICE_VN_TMP = 0
															SET @A_PRICE_US_TMP = 0
															SET @VALUES_OUT_VN  = 0
															SET @VALUES_OUT_US  = 0

															IF @A_TMP_C NOT IN ('NG','INTEGRATED')
															   BEGIN
																	 SELECT @A_PRICE_VN_TMP = eprd.PRICE_VN/[dbo].[CONVERT_UNIT](eprd.UNIT,@PACK_UNIT,eprd.SPAREPART_CODE,@A_DEPARTMENT),
																	        @A_PRICE_US_TMP = eprd.PRICE_US/[dbo].[CONVERT_UNIT](eprd.UNIT,@PACK_UNIT,eprd.SPAREPART_CODE,@A_DEPARTMENT)
																	 FROM EWIP_ORDER eo
																			INNER JOIN EWIP_ORDER_PR eop ON EO.PO_ID_TEMP = eop.PO_ID_TEMP
																			INNER JOIN EWIP_PURCHASE_REQUEST epr ON EOP.PR_CODE = EPR.PR_CODE AND EOP.DEPT_CODE = EPR.DEPT_CODE
																			INNER JOIN EWIP_PURCHASE_REQUEST_DETAIL eprd ON EPR.PR_CODE = eprd.PR_CODE AND EPR.DEPT_CODE = eprd.DEPT_CODE
																	 WHERE EO.PO_ID = @A_TMP_PO_NO AND eprd.SPAREPART_CODE = @A_SPARE_PART_CODE AND eprd.DEPT_CODE = @A_DEPARTMENT
															  
																	IF @A_PRICE_US_TMP IS NULL OR @A_PRICE_VN_TMP IS NULL
																	  BEGIN
																			SELECT TOP 1 
																			@A_PRICE_VN_TMP = [PRICE_VN]/[dbo].[CONVERT_UNIT](UNIT,@PACK_UNIT,[SPARE_PART_CODE],@A_DEPARTMENT) ,
																			@A_PRICE_US_TMP = [PRICE_US]/[dbo].[CONVERT_UNIT](UNIT,@PACK_UNIT,[SPARE_PART_CODE],@A_DEPARTMENT) 
																			FROM [dbo].[EWIP_INVENTORY_BY_TIME]
																			WHERE DEPT_CODE = @A_DEPARTMENT AND SPARE_PART_CODE = @A_SPARE_PART_CODE
																			ORDER BY DATE DESC
																	  END
																END

															SET @VALUES_OUT_VN = [dbo].[CONVERT_UNIT](@A_TMP_UNIT,@PACK_UNIT,@A_SPARE_PART_CODE,@A_DEPARTMENT) * ISNULL(@A_TMP_Q,0) *	ISNULL(@A_PRICE_VN_TMP,0);
															SET @VALUES_OUT_US = [dbo].[CONVERT_UNIT](@A_TMP_UNIT,@PACK_UNIT,@A_SPARE_PART_CODE,@A_DEPARTMENT) * ISNULL(@A_TMP_Q,0) *	ISNULL(@A_PRICE_US_TMP,0);

															IF EXISTS(SELECT * FROM @LOCAL_DATA_OUT WHERE FORMAT(DATE_OUT,'yyyyMMdd') = FORMAT(@DATE_OUT,'yyyyMMdd'))
															   BEGIN
                                                               			UPDATE @LOCAL_DATA_OUT
																		SET VALUES_OUT_VN = VALUES_OUT_VN + @VALUES_OUT_VN, VALUES_OUT_US = VALUES_OUT_US + @VALUES_OUT_US
																		WHERE FORMAT(DATE_OUT,'yyyyMMdd') = FORMAT(@DATE_OUT,'yyyyMMdd')
                                                               END
															ELSE 
															   BEGIN
																		INSERT INTO @LOCAL_DATA_OUT (VALUES_OUT_VN, VALUES_OUT_US, DATE_OUT)
																		VALUES (@VALUES_OUT_VN, @VALUES_OUT_US, @DATE_OUT);
															   END
												   END
													  ELSE
													    BEGIN

														  PRINT 'LENGT = 5'
														      SET @A_TMP_L = SUBSTRING(@A_TMP_LOCATION,1,CHARINDEX('_',@A_TMP_LOCATION) - 1)
															  SET @A_TMP_Q = SUBSTRING(@A_TMP_LOCATION,LEN(@A_TMP_L)+2,CHARINDEX('_',@A_TMP_LOCATION,LEN(@A_TMP_L)+2)-LEN(@A_TMP_L)- 2)
															  SET @A_TMP_C = SUBSTRING(@A_TMP_LOCATION,LEN(@A_TMP_L + '_'+@A_TMP_Q) + 2,CHARINDEX('_',@A_TMP_LOCATION,LEN(@A_TMP_L + '_'+@A_TMP_Q)+2) - LEN(@A_TMP_L + '_'+@A_TMP_Q) - 2)
															

															  PRINT @A_TMP_L
															  PRINT @A_TMP_Q
															  PRINT @A_TMP_C
															  PRINT @A_TMP_EX
															  PRINT @A_TMP_IT
															  PRINT @A_TMP_UNIT


														      SET @A_PRICE_VN_TMP = 0
															  SET @A_PRICE_US_TMP = 0
															  SET @VALUES_OUT_VN  = 0
															  SET @VALUES_OUT_US  = 0

															  IF @A_TMP_C NOT IN ('NG','INTEGRATED')
																 BEGIN
																		SELECT TOP 1 
																		     @A_PRICE_VN_TMP = [PRICE_VN]/[dbo].[CONVERT_UNIT](UNIT,@PACK_UNIT,[SPARE_PART_CODE],@A_DEPARTMENT) ,
																			 @A_PRICE_US_TMP = [PRICE_US]/[dbo].[CONVERT_UNIT](UNIT,@PACK_UNIT,[SPARE_PART_CODE],@A_DEPARTMENT) 
																		FROM [dbo].[EWIP_INVENTORY_BY_TIME]
																		WHERE DEPT_CODE = @A_DEPARTMENT AND SPARE_PART_CODE = @A_SPARE_PART_CODE AND ((MONTH(@DATE_OUT) = [MONTH] AND YEAR(@DATE_OUT) = [YEAR]) OR CAST(@DATE_OUT AS DATE) >= [DATE])
																		ORDER BY DATE DESC

																		IF @A_PRICE_US_TMP IS NULL OR @A_PRICE_VN_TMP IS NULL
																		  BEGIN
																				SELECT TOP 1 
																				@A_PRICE_VN_TMP = [PRICE_VN]/[dbo].[CONVERT_UNIT](UNIT,@PACK_UNIT,[SPARE_PART_CODE],@A_DEPARTMENT) ,
																				@A_PRICE_US_TMP = [PRICE_US]/[dbo].[CONVERT_UNIT](UNIT,@PACK_UNIT,[SPARE_PART_CODE],@A_DEPARTMENT) 
																				FROM [dbo].[EWIP_INVENTORY_BY_TIME]
																				WHERE DEPT_CODE = @A_DEPARTMENT AND SPARE_PART_CODE = @A_SPARE_PART_CODE
																				ORDER BY DATE DESC
																		  END
																  END

																
																SET @VALUES_OUT_VN = [dbo].[CONVERT_UNIT](@UNIT_OUT,@PACK_UNIT,@A_SPARE_PART_CODE,@A_DEPARTMENT) * ISNULL(@QUANTITY_OUT_SP,0) *	ISNULL(@A_PRICE_VN_TMP,0);
																SET @VALUES_OUT_US = [dbo].[CONVERT_UNIT](@UNIT_OUT,@PACK_UNIT,@A_SPARE_PART_CODE,@A_DEPARTMENT) * ISNULL(@QUANTITY_OUT_SP,0) *	ISNULL(@A_PRICE_US_TMP,0);

																IF EXISTS(SELECT * FROM @LOCAL_DATA_OUT WHERE FORMAT(DATE_OUT,'yyyyMMdd') = FORMAT(@DATE_OUT,'yyyyMMdd'))
																	BEGIN
																	   PRINT 'EXIST:' + CAST(@VALUES_OUT_VN AS NVARCHAR)
																	    PRINT 'EXIST:' + CAST(@VALUES_OUT_US AS NVARCHAR)

                                                               			UPDATE @LOCAL_DATA_OUT
																		SET VALUES_OUT_VN = VALUES_OUT_VN + @VALUES_OUT_VN, VALUES_OUT_US = VALUES_OUT_US + @VALUES_OUT_US
																		WHERE FORMAT(DATE_OUT,'yyyyMMdd') = FORMAT(@DATE_OUT,'yyyyMMdd')
																	 END
																ELSE 
																	BEGIN
																	     PRINT 'NEW:' + CAST(@VALUES_OUT_VN AS NVARCHAR)
																	     PRINT 'NEW:' + CAST(@VALUES_OUT_US AS NVARCHAR)

																		INSERT INTO @LOCAL_DATA_OUT (VALUES_OUT_VN, VALUES_OUT_US, DATE_OUT)
																		VALUES (@VALUES_OUT_VN, @VALUES_OUT_US, @DATE_OUT)
																	END

																	BREAK;

														END

													FETCH NEXT FROM cursorOutSub
													INTO @A_TMP_LOCATION
								             END
											 CLOSE cursorOutSub
											 DEALLOCATE cursorOutSub

											 FETCH NEXT FROM cursorOutSparepart
											 INTO @LOCATION_OUT,@QUANTITY_OUT_SP,@UNIT_OUT,@DATE_OUT
									 END


									 PRINT 'DANGLV'
								CLOSE cursorOutSparepart
								DEALLOCATE cursorOutSparepart

								MERGE [dbo].[EWIP_INVENTORY_QTY_VALUE_BY_DAY] AS TARGET
								USING @LOCAL_DATA_OUT AS SOURCE
								ON 
								(
									TARGET.SPARE_PART_CODE = @A_SPARE_PART_CODE AND
									TARGET.DATE = SOURCE.DATE_OUT
								)
								WHEN MATCHED 
								    THEN UPDATE SET TARGET.OUT_VALUES_VN = SOURCE.VALUES_OUT_VN,TARGET.OUT_VALUES_US = SOURCE.VALUES_OUT_US,TARGET.UNIT = @PACK_UNIT,SYS_TIME = SYSDATETIME()
								WHEN NOT MATCHED BY TARGET
							    THEN INSERT([SPARE_PART_CODE],[DEPT_CODE],[STOCK_CODE],[DATE],[IN_VALUES_VN],[OUT_VALUES_VN],[INVENTORY_VALUES_VN],[IN_VALUES_US],[OUT_VALUES_US],[INVENTORY_VALUES_US],[QUANTITY_IN],[QUANTITY_OUT],[QUANTITY_INVENTORY],[QTY_INVENTORY_INCLUDE],[SYS_TIME],[UNIT],WEEK,QUARTER)
									 VALUES(@A_SPARE_PART_CODE,
									 @A_DEPARTMENT,
									 'SMT_K1',
									 SOURCE.DATE_OUT,
									 0,
									 SOURCE.VALUES_OUT_VN,
									 0,
									 0,
									 SOURCE.VALUES_OUT_US,
									 0,
									 0,
									 0
									 ,0
									 ,0,
									 SYSDATETIME(),
									 @PACK_UNIT,
									 DATEPART(WEEK,SOURCE.DATE_OUT),DATEPART(QUARTER,SOURCE.DATE_OUT));

								DECLARE @LOCAL_QTY_OUT TABLE(
								   QUANTITY FLOAT,
								   DATE_OUT DATE
								)

								 -- TINH SO LUONG XUAT
								 INSERT INTO @LOCAL_QTY_OUT
								 SELECT SUM([dbo].[CONVERT_UNIT](eso.UNIT_ID,@PACK_UNIT,ESO.SPARE_PART_CODE,@A_DEPARTMENT) * ISNULL(eso.QUANTITY,0)), HIS.DATE
								 FROM EWIP_HISTORY_INVENTORY HIS
								 INNER JOIN [dbo].[EWIP_STOCK_OUT] eso ON HIS.STOCK_IN_OUT_CODE = eso.STOCK_OUT_CODE AND HIS.SPARE_PART_CODE = ESO.SPARE_PART_CODE AND HIS.DEPT_CODE = ESO.DEPT_CODE
								 WHERE HIS.SPARE_PART_CODE = @A_SPARE_PART_CODE AND HIS.DEPT_CODE = @A_DEPARTMENT AND 
								         HIS.DATE BETWEEN @FROM_DAY AND @TO_DAY
								GROUP BY HIS.SPARE_PART_CODE,HIS.DATE

								MERGE [dbo].[EWIP_INVENTORY_QTY_VALUE_BY_DAY] AS TARGET
								USING @LOCAL_QTY_OUT AS SOURCE
								ON 
								(
									TARGET.SPARE_PART_CODE = @A_SPARE_PART_CODE AND
									TARGET.DATE = SOURCE.DATE_OUT
								)
								WHEN MATCHED 
								    THEN UPDATE SET TARGET.QUANTITY_OUT = SOURCE.QUANTITY,TARGET.UNIT = @PACK_UNIT,SYS_TIME = SYSDATETIME()
								WHEN NOT MATCHED BY TARGET
							    THEN INSERT([SPARE_PART_CODE],[DEPT_CODE],[STOCK_CODE],[DATE],[IN_VALUES_VN],[OUT_VALUES_VN],[INVENTORY_VALUES_VN],[IN_VALUES_US],[OUT_VALUES_US],[INVENTORY_VALUES_US],[QUANTITY_IN],[QUANTITY_OUT],[QUANTITY_INVENTORY],[QTY_INVENTORY_INCLUDE],[SYS_TIME],[UNIT],WEEK,QUARTER)
									 VALUES(@A_SPARE_PART_CODE,
									 @A_DEPARTMENT,
									 'SMT_K1',
									 SOURCE.DATE_OUT,
									 0,
									 0,
									 0,
									 0,
									 0,
									 0,
									 0,
									 SOURCE.QUANTITY,
									 0,
									 0,
									 SYSDATETIME(),@PACK_UNIT,DATEPART(WEEK,SOURCE.DATE_OUT),DATEPART(QUARTER,SOURCE.DATE_OUT));

								-- INVENTORY VALUE --
								 DECLARE @LOCAL_DATA_INVENTORY TABLE
								 (
								 	VALUES_INVENTORY_VN FLOAT,
								 	VALUES_INVENTORY_US FLOAT,
								 	DATE_INVENTORY DATE 
								 )

								 DECLARE @LOCAL_DATA_INVENTORY_QUANTITY TABLE
								 (
									QUANTITY FLOAT,
									DATE DATE
								 )

								DECLARE @NEW_DATE DATE
								DECLARE @PRE_MONTH INT
								DECLARE @YEAR INT
								DECLARE @INVENTORY_PRE_MONTH_VN FLOAT = 0
								DECLARE @INVENTORY_PRE_MONTH_US FLOAT = 0
								DECLARE @IN_VALUE_VN1 FLOAT = 0
								DECLARE @IN_VALUE_US1 FLOAT = 0
								DECLARE @OUT_VALUE_VN1 FLOAT = 0
								DECLARE @OUT_VALUE_US1 FLOAT = 0
								DECLARE @A_TMP_LOCATION1 NVARCHAR(MAX)

								DECLARE @QTY_IN1 FLOAT  = 0
								DECLARE @QTY_OUT1 FLOAT = 0

								DECLARE @QTY_PRE_MONTH FLOAT = 0
								DECLARE @QTY_INVENTORY FLOAT = 0
								DECLARE @QTY_INVENTORY_INCLUDE FLOAT  = 0

								SET @LOCATION_OUT = ''
								SET @QUANTITY_OUT_SP = 0
								SET @UNIT_OUT = ''
								SET @VALUES_OUT_VN = 0
								SET @VALUES_OUT_US  = 0
								SET @A_TMP_LOCATION = ''
								SET @CHECK_COUNT = 0
								SET @A_TMP_L =''
								SET @A_TMP_Q = ''
								SET @A_TMP_C =''
								SET @A_TMP_EX = '' 
								SET @A_TMP_IT = ''
								SET @A_TMP_UNIT = ''
								SET @A_TMP_PO_NO = ''
								SET @A_PRICE_US_TMP = 0
								SET @A_PRICE_VN_TMP = 0
								SET @DATE_OUT = NULL

						        DECLARE @I INT = 0

								WHILE DATEADD(DAY,@I,@FROM_DAY) < DATEADD(DAY,1,@TO_DAY) 
									BEGIN  
											SET @NEW_DATE = DATEADD(DAY,@I,@FROM_DAY) 

											PRINT @NEW_DATE
											-- TINH GIA TRI TON THANG TRUOC --
											IF @I = 0
												 BEGIN
                                						SET @PRE_MONTH = MONTH(DATEADD(MONTH,-1,@NEW_DATE))
														SET @YEAR = YEAR(DATEADD(MONTH,-1,@NEW_DATE))

														SELECT @INVENTORY_PRE_MONTH_VN = ISNULL([INVENTORY_VALUES_VN],0),
														       @INVENTORY_PRE_MONTH_US = ISNULL([INVENTORY_VALUES_US],0)
														FROM [dbo].[EWIP_INVENTORY_VALUES_BY_TIME]
														WHERE MONTH = @PRE_MONTH AND YEAR = @YEAR AND SPARE_PART_CODE = @A_SPARE_PART_CODE AND DEPT_CODE = @A_DEPARTMENT

														IF @INVENTORY_PRE_MONTH_US IS NULL 
														    SET @INVENTORY_PRE_MONTH_US = 0

														IF @INVENTORY_PRE_MONTH_VN IS NULL
													       SET @INVENTORY_PRE_MONTH_VN = 0

														PRINT 'PRE_MONTH' + CAST(@PRE_MONTH AS NVARCHAR)

														SELECT @QTY_PRE_MONTH = ISNULL(QUANTITY,0) * dbo.CONVERT_UNIT(UNIT,@PACK_UNIT,@A_SPARE_PART_CODE,@A_DEPARTMENT)
														FROM [dbo].[EWIP_INVENTORY_BY_TIME]
														WHERE MONTH = @PRE_MONTH AND YEAR = @YEAR AND SPARE_PART_CODE = @A_SPARE_PART_CODE

														PRINT '@QTY_PRE_MONTH' + CAST(@QTY_PRE_MONTH AS NVARCHAR)
												 END

												 -- TINH LUONG NHAP KHO TU DAU THANG DEN NGAY @NEW_DATE --
											  SELECT  @IN_VALUE_VN1 =   SUM((ISNULL(dbo.CONVERT_UNIT(ehi.UNIT,@PACK_UNIT,@A_SPARE_PART_CODE,@A_DEPARTMENT)* Ehi.QUANTITY,0) - ISNULL(dbo.CONVERT_UNIT(ehi.UNIT,@PACK_UNIT,@A_SPARE_PART_CODE,@A_DEPARTMENT) *EHI.QUANTITY_NG,0) - CASE WHEN STIN.IS_INTEGRATED = 'True' THEN ISNULL(STIN.QUANTITY * dbo.CONVERT_UNIT(STIN.UNIT_CODE,@PACK_UNIT,@A_SPARE_PART_CODE,@A_DEPARTMENT) ,0) ELSE 0 END)* ISNULL(SUB.PRICE_VN,0)),
													  @IN_VALUE_US1 =   SUM((ISNULL(dbo.CONVERT_UNIT(ehi.UNIT,@PACK_UNIT,@A_SPARE_PART_CODE,@A_DEPARTMENT) * EHI.QUANTITY,0) - ISNULL(dbo.CONVERT_UNIT(ehi.UNIT,@PACK_UNIT,@A_SPARE_PART_CODE,@A_DEPARTMENT)*EHI.QUANTITY_NG,0) - CASE WHEN STIN.IS_INTEGRATED = 'True' THEN ISNULL(STIN.QUANTITY * dbo.CONVERT_UNIT(STIN.UNIT_CODE,@PACK_UNIT,@A_SPARE_PART_CODE,@A_DEPARTMENT) ,0) ELSE 0 END)* ISNULL(SUB.PRICE_US,0))
											          --@IN_VALUE_US1 = SUM((ISNULL(EHI.QUANTITY,0) - ISNULL(EHI.QUANTITY_NG,0) - CASE WHEN STIN.IS_INTEGRATED = 'True' THEN ISNULL(STIN.QUANTITY,0) ELSE 0 END)* ISNULL(SUB2.PRICE_US,ISNULL(SUB3.PRICE_US,SUB.PRICE_US)))
											 FROM EWIP_HISTORY_INVENTORY ehi
											 LEFT JOIN [dbo].[EWIP_INVENTORY_DELIVERY_RECEIVING] IDR ON ehi.STOCK_IN_OUT_CODE = IDR.CODE_NO AND EHI.DEPT_CODE = IDR.DEPT_CODE
											 INNER JOIN [dbo].[EWIP_SP_STOCKIN] STIN ON ehi.STOCK_IN_OUT_CODE = stin.STOCK_IN_CODE AND EHI.SPARE_PART_CODE = STIN.SPARE_PART_CODE AND EHI.DEPT_CODE = STIN.DEPT_CODE
											 --LEFT JOIN (
												--		  SELECT EO.PO_ID AS PO_NO,eprd.SPAREPART_CODE ,'PACK' as UNIT,eprd.DEPT_CODE,
												--		  eprd.PRICE_VN/[dbo].[CONVERT_UNIT](eprd.UNIT,@PACK_UNIT,eprd.SPAREPART_CODE,@A_DEPARTMENT) AS PRICE_VN,
												--		  eprd.PRICE_US/[dbo].[CONVERT_UNIT](eprd.UNIT,@PACK_UNIT,eprd.SPAREPART_CODE,@A_DEPARTMENT) AS PRICE_US
												--		  FROM EWIP_ORDER eo
												--		  INNER JOIN EWIP_ORDER_PR eop ON EO.PO_ID_TEMP = eop.PO_ID_TEMP
												--		  INNER JOIN EWIP_PURCHASE_REQUEST epr ON EOP.PR_CODE = EPR.PR_CODE AND EOP.DEPT_CODE = EPR.DEPT_CODE
												--		  INNER JOIN EWIP_PURCHASE_REQUEST_DETAIL eprd ON EPR.PR_CODE = eprd.PR_CODE AND EPR.DEPT_CODE = eprd.DEPT_CODE
												--		) SUB2 ON SUB2.SPAREPART_CODE = EHI.SPARE_PART_CODE AND SUB2.DEPT_CODE = EHI.DEPT_CODE AND SUB2.PO_NO = IDR.ORDER_CODE
											 --LEFT JOIN (SELECT
											 --             SPARE_PART_CODE,
											 --             [PRICE_VN]/[dbo].[CONVERT_UNIT](UNIT,@PACK_UNIT,[SPARE_PART_CODE],@A_DEPARTMENT) AS PRICE_VN,
												--		  [PRICE_US]/[dbo].[CONVERT_UNIT](UNIT,@PACK_UNIT,[SPARE_PART_CODE],@A_DEPARTMENT)  AS PRICE_US,
												--		  DATE
											 --           FROM [dbo].[EWIP_INVENTORY_BY_TIME]
												--		WHERE SPARE_PART_CODE = @A_SPARE_PART_CODE AND DEPT_CODE = @A_DEPARTMENT
												--		) AS SUB3 ON SUB3.SPARE_PART_CODE = ehi.SPARE_PART_CODE AND MONTH(EHI.DATE) = MONTH(SUB3.DATE) AND YEAR(EHI.DATE) = YEAR(SUB3.DATE)
											 LEFT JOIN (SELECT TOP 1 WITH TIES 
															[SPARE_PART_CODE],
															[PRICE_VN]/[dbo].[CONVERT_UNIT]([UNIT_CODE],@PACK_UNIT,[SPARE_PART_CODE],@A_DEPARTMENT) AS [PRICE_VN],
															[PRICE_US]/[dbo].[CONVERT_UNIT]([UNIT_CODE],@PACK_UNIT,[SPARE_PART_CODE],@A_DEPARTMENT) AS [PRICE_US], 
															@PACK_UNIT AS UNIT
															FROM [dbo].[EWIP_SPAREPART_PRICE] 
															WHERE [DEPT_CODE] = @A_DEPARTMENT AND SPARE_PART_CODE = @A_SPARE_PART_CODE
															ORDER BY ROW_NUMBER() OVER(PARTITION BY SPARE_PART_CODE ORDER BY [DATE] DESC)) SUB ON SUB.SPARE_PART_CODE = EHI.SPARE_PART_CODE
											 WHERE 
											    ehi.IN_OUT = 'IN' AND ehi.DEPT_CODE = @A_DEPARTMENT 
												AND ehi.SPARE_PART_CODE = @A_SPARE_PART_CODE AND EHI.DATE BETWEEN (CASE WHEN @I = 0 THEN  DATEADD(month, DATEDIFF(month, 0, CAST(@NEW_DATE AS DATE)), 0) ELSE @NEW_DATE END) AND @NEW_DATE
											 GROUP BY ehi.SPARE_PART_CODE

											 -- 
											 SELECT @QTY_IN1 = SUM([dbo].[CONVERT_UNIT](STIN.UNIT_CODE,@PACK_UNIT,STIN.SPARE_PART_CODE,@A_DEPARTMENT) * ISNULL(STIN.QUANTITY,0))
												FROM EWIP_HISTORY_INVENTORY HIS
												INNER JOIN [dbo].[EWIP_SP_STOCKIN] STIN ON HIS.STOCK_IN_OUT_CODE = STIN.STOCK_IN_CODE AND HIS.SPARE_PART_CODE = STIN.SPARE_PART_CODE AND HIS.DEPT_CODE = STIN.DEPT_CODE
												WHERE HIS.SPARE_PART_CODE = @A_SPARE_PART_CODE AND HIS.DEPT_CODE = @A_DEPARTMENT AND 
												      HIS.DATE  BETWEEN (CASE WHEN @I = 0 THEN  DATEADD(month, DATEDIFF(month, 0, CAST(@NEW_DATE AS DATE)), 0) ELSE @NEW_DATE END) AND @NEW_DATE
												GROUP BY HIS.SPARE_PART_CODE


											 -- TINH LUONG XUAT KHO TU DAU THANG DEN NGAY @NEW_DATE -- NEU I > 0 THI DUA VAO TON NGAY NEW_DATE - 1
											DECLARE cursorOutSparepart1 CURSOR FAST_FORWARD READ_ONLY LOCAL FOR
											SELECT eso.LOCATION,eso.QUANTITY,eso.UNIT_ID AS UNIT,ESO.DATE
											FROM EWIP_STOCK_OUT eso  
													INNER JOIN EWIP_INVENTORY_DELIVERY_RECEIVING eidr ON eso.STOCK_OUT_CODE = eidr.CODE_NO AND ESO.DEPT_CODE = eidr.DEPT_CODE
											WHERE 
										 		ESO.SPARE_PART_CODE = @A_SPARE_PART_CODE AND 
										 		ESO.DEPT_CODE = @A_DEPARTMENT AND 
										 		ESO.DATE BETWEEN (CASE WHEN @I = 0 THEN DATEADD(month, DATEDIFF(month, 0, CAST(@NEW_DATE AS DATE)), 0) ELSE @NEW_DATE END) AND @NEW_DATE
										 
											SELECT @QTY_OUT1 = SUM([dbo].[CONVERT_UNIT](eso.UNIT_ID,@PACK_UNIT,ESO.SPARE_PART_CODE,@A_DEPARTMENT) * ISNULL(eso.QUANTITY,0))
											FROM EWIP_HISTORY_INVENTORY HIS
											INNER JOIN [dbo].[EWIP_STOCK_OUT] eso ON HIS.STOCK_IN_OUT_CODE = eso.STOCK_OUT_CODE AND HIS.SPARE_PART_CODE = ESO.SPARE_PART_CODE AND HIS.DEPT_CODE = ESO.DEPT_CODE
											WHERE HIS.SPARE_PART_CODE = @A_SPARE_PART_CODE AND HIS.DEPT_CODE = @A_DEPARTMENT AND 
											        HIS.DATE BETWEEN (CASE WHEN @I = 0 THEN DATEADD(month, DATEDIFF(month, 0, CAST(@NEW_DATE AS DATE)), 0) ELSE @NEW_DATE END) AND @NEW_DATE
											GROUP BY HIS.SPARE_PART_CODE

										  OPEN cursorOutSparepart1
										 
										  FETCH NEXT FROM cursorOutSparepart1
										  INTO @LOCATION_OUT,@QUANTITY_OUT_SP,@UNIT_OUT,@DATE_OUT

										  WHILE @@FETCH_STATUS = 0
											 BEGIN
												DECLARE cursorOutSub1 CURSOR FAST_FORWARD READ_ONLY LOCAL FOR
												SELECT value FROM STRING_SPLIT(@LOCATION_OUT,',')

												OPEN cursorOutSub1

												FETCH NEXT FROM cursorOutSub1
												INTO @A_TMP_LOCATION1

												WHILE @@FETCH_STATUS = 0
													BEGIN
															SELECT @CHECK_COUNT = COUNT(value)
															from 
															STRING_SPLIT(@A_TMP_LOCATION1,'_')
											
															IF @CHECK_COUNT = 7
																	BEGIN
															SET @A_TMP_L = SUBSTRING(@A_TMP_LOCATION1,1,CHARINDEX('_',@A_TMP_LOCATION1) - 1)
															SET @A_TMP_Q = SUBSTRING(@A_TMP_LOCATION1,LEN(@A_TMP_L)+2,CHARINDEX('_',@A_TMP_LOCATION1,LEN(@A_TMP_L)+2)-LEN(@A_TMP_L)- 2)
															SET @A_TMP_C = SUBSTRING(@A_TMP_LOCATION1,LEN(@A_TMP_L + '_'+@A_TMP_Q) + 2,CHARINDEX('_',@A_TMP_LOCATION1,LEN(@A_TMP_L + '_'+@A_TMP_Q)+2) - LEN(@A_TMP_L + '_'+@A_TMP_Q) - 2)
															SET @A_TMP_EX = SUBSTRING(@A_TMP_LOCATION1,LEN(@A_TMP_L + '_'+@A_TMP_Q + '_'+@A_TMP_C) + 2,CHARINDEX('_',@A_TMP_LOCATION1,LEN(@A_TMP_L + '_'+@A_TMP_Q + '_'+@A_TMP_C)+2) - LEN(@A_TMP_L + '_'+@A_TMP_Q + '_'+@A_TMP_C) - 2)
															SET @A_TMP_IT = SUBSTRING(@A_TMP_LOCATION1,LEN(@A_TMP_L + '_'+@A_TMP_Q + '_'+@A_TMP_C + '_' + @A_TMP_EX) + 2,
															                                          CHARINDEX('_',@A_TMP_LOCATION1,LEN(@A_TMP_L + '_'+@A_TMP_Q + '_'+@A_TMP_C + '_' + @A_TMP_EX)+2) - LEN(@A_TMP_L + '_'+@A_TMP_Q + '_'+@A_TMP_C + '_' + @A_TMP_EX) - 2)

															SET @A_TMP_UNIT = SUBSTRING(@A_TMP_LOCATION1,
															                           LEN(@A_TMP_L + '_'+@A_TMP_Q + '_'+@A_TMP_C + '_' + @A_TMP_EX + '_' + @A_TMP_IT) + 2,
																					   CHARINDEX('_',@A_TMP_LOCATION1,LEN(@A_TMP_L + '_'+@A_TMP_Q + '_'+@A_TMP_C + '_' + @A_TMP_EX + '_' + @A_TMP_IT)+2) - LEN(@A_TMP_L + '_'+@A_TMP_Q + '_'+@A_TMP_C + '_' + @A_TMP_EX + '_' + @A_TMP_IT) - 2)

															SET @A_TMP_PO_NO = SUBSTRING(@A_TMP_LOCATION1,LEN(@A_TMP_L + '_'+@A_TMP_Q + '_'+@A_TMP_C + '_' + @A_TMP_EX + '_' + @A_TMP_IT + '_' + @A_TMP_UNIT) + 2,LEN(@A_TMP_LOCATION1) - LEN(@A_TMP_L + '_'+@A_TMP_Q + '_'+@A_TMP_C + '_' + @A_TMP_EX + '_' + @A_TMP_IT + '_' + @A_TMP_UNIT) - 1)
															   
															SET @A_PRICE_VN_TMP = 0
															SET @A_PRICE_US_TMP = 0

															IF @A_TMP_C NOT IN ('NG','INTEGRATED')
															   BEGIN
																	 SELECT @A_PRICE_VN_TMP = eprd.PRICE_VN/[dbo].[CONVERT_UNIT](eprd.UNIT,@PACK_UNIT,eprd.SPAREPART_CODE,@A_DEPARTMENT),
																	        @A_PRICE_US_TMP = eprd.PRICE_US/[dbo].[CONVERT_UNIT](eprd.UNIT,@PACK_UNIT,eprd.SPAREPART_CODE,@A_DEPARTMENT)
																	 FROM EWIP_ORDER eo
																			INNER JOIN EWIP_ORDER_PR eop ON EO.PO_ID_TEMP = eop.PO_ID_TEMP
																			INNER JOIN EWIP_PURCHASE_REQUEST epr ON EOP.PR_CODE = EPR.PR_CODE AND EOP.DEPT_CODE = EPR.DEPT_CODE
																			INNER JOIN EWIP_PURCHASE_REQUEST_DETAIL eprd ON EPR.PR_CODE = eprd.PR_CODE AND EPR.DEPT_CODE = eprd.DEPT_CODE
																	 WHERE EO.PO_ID = @A_TMP_PO_NO AND eprd.SPAREPART_CODE = @A_SPARE_PART_CODE AND eprd.DEPT_CODE = @A_DEPARTMENT
															  

																	IF @A_PRICE_US_TMP IS NULL OR @A_PRICE_VN_TMP IS NULL
																	     BEGIN
																				SELECT TOP 1 
																				@A_PRICE_VN_TMP = [PRICE_VN]/[dbo].[CONVERT_UNIT](UNIT,@PACK_UNIT,[SPARE_PART_CODE],@A_DEPARTMENT) ,
																				@A_PRICE_US_TMP = [PRICE_US]/[dbo].[CONVERT_UNIT](UNIT,@PACK_UNIT,[SPARE_PART_CODE],@A_DEPARTMENT) 
																				FROM [dbo].[EWIP_INVENTORY_BY_TIME]
																				WHERE DEPT_CODE = @A_DEPARTMENT AND SPARE_PART_CODE = @A_SPARE_PART_CODE --AND (CAST(@DATE_OUT AS DATE) >= [DATE] OR (MONTH(@DATE_OUT) = [MONTH] AND YEAR(@DATE_OUT) = [YEAR]))
																				ORDER BY DATE DESC
																		 END
																END

															SET @OUT_VALUE_VN1 += [dbo].[CONVERT_UNIT](@A_TMP_UNIT,@PACK_UNIT,@A_SPARE_PART_CODE,@A_DEPARTMENT) * ISNULL(@A_TMP_Q,0) *	@A_PRICE_VN_TMP;
															SET @OUT_VALUE_US1 += [dbo].[CONVERT_UNIT](@A_TMP_UNIT,@PACK_UNIT,@A_SPARE_PART_CODE,@A_DEPARTMENT) * ISNULL(@A_TMP_Q,0) *	@A_PRICE_US_TMP;
												   END
															ELSE
																	BEGIN

																SET @A_TMP_L = SUBSTRING(@A_TMP_LOCATION1,1,CHARINDEX('_',@A_TMP_LOCATION1) - 1)
																SET @A_TMP_Q = SUBSTRING(@A_TMP_LOCATION1,LEN(@A_TMP_L)+2,CHARINDEX('_',@A_TMP_LOCATION1,LEN(@A_TMP_L)+2)-LEN(@A_TMP_L)- 2)
																SET @A_TMP_C = SUBSTRING(@A_TMP_LOCATION1,LEN(@A_TMP_L + '_'+@A_TMP_Q) + 2,CHARINDEX('_',@A_TMP_LOCATION1,LEN(@A_TMP_L + '_'+@A_TMP_Q)+2) - LEN(@A_TMP_L + '_'+@A_TMP_Q) - 2)

														      SET @A_PRICE_VN_TMP = 0
															  SET @A_PRICE_US_TMP = 0

															  IF @A_TMP_C NOT IN ('NG','INTEGRATED')
																  BEGIN
																		SELECT TOP 1 
																		     @A_PRICE_VN_TMP = [PRICE_VN]/[dbo].[CONVERT_UNIT](UNIT,@PACK_UNIT,[SPARE_PART_CODE],@A_DEPARTMENT) ,
																			 @A_PRICE_US_TMP = [PRICE_US]/[dbo].[CONVERT_UNIT](UNIT,@PACK_UNIT,[SPARE_PART_CODE],@A_DEPARTMENT) 
																		FROM [dbo].[EWIP_INVENTORY_BY_TIME]
																		WHERE DEPT_CODE = @A_DEPARTMENT AND SPARE_PART_CODE = @A_SPARE_PART_CODE --AND (CAST(@DATE_OUT AS DATE) >= [DATE] OR (MONTH(@DATE_OUT) = [MONTH] AND YEAR(@DATE_OUT) = [YEAR]))
																		ORDER BY DATE DESC
																	END

																SET @OUT_VALUE_VN1 +=[dbo].[CONVERT_UNIT](@UNIT_OUT,@PACK_UNIT,@A_SPARE_PART_CODE,@A_DEPARTMENT) * @QUANTITY_OUT_SP * @A_PRICE_VN_TMP
																SET @OUT_VALUE_US1 +=[dbo].[CONVERT_UNIT](@UNIT_OUT,@PACK_UNIT,@A_SPARE_PART_CODE,@A_DEPARTMENT) * @QUANTITY_OUT_SP * @A_PRICE_US_TMP
																BREAK;
														END

															FETCH NEXT FROM cursorOutSub1
															INTO @A_TMP_LOCATION1
													END
												CLOSE cursorOutSub1
												DEALLOCATE cursorOutSub1

												FETCH NEXT FROM cursorOutSparepart1
												INTO @LOCATION_OUT,@QUANTITY_OUT_SP,@UNIT_OUT,@DATE_OUT
											END
										  
										  CLOSE cursorOutSparepart1
										  DEALLOCATE cursorOutSparepart1

										  IF @I = 0
										    BEGIN
												SET @INVENTORY_VALUES_US = ISNULL(@INVENTORY_PRE_MONTH_US,0) + ISNULL(@IN_VALUE_US1,0) - ISNULL(@OUT_VALUE_US1,0)
												SET @INVENTORY_VALUES_VN = ISNULL(@INVENTORY_PRE_MONTH_VN ,0)+ ISNULL(@IN_VALUE_VN1,0) - ISNULL(@OUT_VALUE_VN1,0)

												PRINT 'QTY_PRE:' + CAST(@QTY_PRE_MONTH AS NVARCHAR)
												PRINT '@QTY_IN1:' + CAST(@QTY_IN1 AS NVARCHAR)
												PRINT '@QTY_OUT1:' + CAST(@QTY_OUT1 AS NVARCHAR)
												SET @QTY_INVENTORY = ISNULL(@QTY_PRE_MONTH,0) + ISNULL(@QTY_IN1,0) - ISNULL(@QTY_OUT1,0)
										    END
										  ELSE
										     BEGIN
													SET @INVENTORY_VALUES_US = ISNULL(@INVENTORY_VALUES_US,0) + ISNULL(@IN_VALUE_US1,0) - ISNULL(@OUT_VALUE_US1,0)
												    SET @INVENTORY_VALUES_VN = ISNULL(@INVENTORY_VALUES_VN,0) + ISNULL(@IN_VALUE_VN1,0) - ISNULL(@OUT_VALUE_VN1,0)

													PRINT '@QTY_INVENTORY:' + CAST(@QTY_INVENTORY AS NVARCHAR)
													PRINT '@QTY_IN1:' + CAST(@QTY_IN1 AS NVARCHAR)
													PRINT '@QTY_OUT1:' + CAST(@QTY_OUT1 AS NVARCHAR)
													SET @QTY_INVENTORY = ISNULL(@QTY_INVENTORY,0) + ISNULL(@QTY_IN1,0) - ISNULL(@QTY_OUT1,0)
											 END

											 IF @INVENTORY_VALUES_VN < 0 OR @INVENTORY_VALUES_VN IS NULL
											     SET @INVENTORY_VALUES_VN = 0

												 IF @INVENTORY_VALUES_US < 0 OR @INVENTORY_VALUES_US IS NULL
											     SET @INVENTORY_VALUES_US = 0

										  INSERT INTO @LOCAL_DATA_INVENTORY
										  VALUES(@INVENTORY_VALUES_VN,@INVENTORY_VALUES_US,@NEW_DATE)

										  IF @QTY_INVENTORY < 0 OR @QTY_INVENTORY IS NULL
										      SET @QTY_INVENTORY = 0

										  INSERT INTO @LOCAL_DATA_INVENTORY_QUANTITY (QUANTITY, DATE)
										  VALUES (@QTY_INVENTORY, @NEW_DATE);

										  MERGE [dbo].[EWIP_INVENTORY_QTY_VALUE_BY_DAY] AS TARGET
										  USING @LOCAL_DATA_INVENTORY AS SOURCE
										  ON 
										  (
										  	TARGET.SPARE_PART_CODE = @A_SPARE_PART_CODE AND
										  	TARGET.DATE = SOURCE.DATE_INVENTORY
										  )
										  WHEN MATCHED 
										      THEN UPDATE SET TARGET.INVENTORY_VALUES_VN = SOURCE.VALUES_INVENTORY_VN,TARGET.INVENTORY_VALUES_US = SOURCE.VALUES_INVENTORY_US,TARGET.UNIT = @PACK_UNIT,SYS_TIME = SYSDATETIME()
										  WHEN NOT MATCHED BY TARGET
										  THEN INSERT([SPARE_PART_CODE],[DEPT_CODE],[STOCK_CODE],[DATE],[IN_VALUES_VN],[OUT_VALUES_VN],[INVENTORY_VALUES_VN],[IN_VALUES_US],[OUT_VALUES_US],[INVENTORY_VALUES_US],[QUANTITY_IN],[QUANTITY_OUT],[QUANTITY_INVENTORY],[QTY_INVENTORY_INCLUDE],[SYS_TIME],[UNIT],WEEK,QUARTER)
										  	   VALUES(@A_SPARE_PART_CODE,@A_DEPARTMENT,'SMT_K1',SOURCE.DATE_INVENTORY,0,0,SOURCE.VALUES_INVENTORY_VN,0,0,SOURCE.VALUES_INVENTORY_US,0,0,0,0,SYSDATETIME(),@PACK_UNIT,DATEPART(WEEK,SOURCE.DATE_INVENTORY),DATEPART(QUARTER,SOURCE.DATE_INVENTORY));

										  MERGE [dbo].[EWIP_INVENTORY_QTY_VALUE_BY_DAY] AS TARGET
										  USING @LOCAL_DATA_INVENTORY_QUANTITY AS SOURCE
										  ON 
										  (
										  	TARGET.SPARE_PART_CODE = @A_SPARE_PART_CODE AND
										  	TARGET.DATE = SOURCE.DATE
										  )
										  WHEN MATCHED 
										      THEN UPDATE SET TARGET.QUANTITY_INVENTORY = SOURCE.QUANTITY,TARGET.UNIT = @PACK_UNIT,SYS_TIME = SYSDATETIME()
										  WHEN NOT MATCHED BY TARGET
										  THEN INSERT([SPARE_PART_CODE],[DEPT_CODE],[STOCK_CODE],[DATE],[IN_VALUES_VN],[OUT_VALUES_VN],[INVENTORY_VALUES_VN],[IN_VALUES_US],[OUT_VALUES_US],[INVENTORY_VALUES_US],[QUANTITY_IN],[QUANTITY_OUT],[QUANTITY_INVENTORY],[QTY_INVENTORY_INCLUDE],[SYS_TIME],[UNIT],WEEK,QUARTER)
										  	   VALUES(@A_SPARE_PART_CODE,@A_DEPARTMENT,'SMT_K1',SOURCE.DATE,0,0,0,0,0,0,0,0,SOURCE.QUANTITY,0,SYSDATETIME(),@PACK_UNIT,DATEPART(WEEK,SOURCE.DATE),DATEPART(QUARTER,SOURCE.DATE));

										  SET @I = @I + 1

										  SET @INVENTORY_PRE_MONTH_VN  = 0
										  SET @INVENTORY_PRE_MONTH_US  = 0
										  SET @IN_VALUE_VN1  = 0
										  SET @IN_VALUE_US1  = 0
										  SET @OUT_VALUE_VN1  = 0
										  SET @OUT_VALUE_US1  = 0
										  SET @QTY_IN1   = 0
										  SET @QTY_OUT1  = 0
										  SET @QTY_PRE_MONTH  = 0
									END
                               
						END
				 END

			COMMIT TRAN;
		END
	SET @N_RETURN = 0;
	SET @V_RETURN = 'MSG_COM_004';
END TRY
BEGIN CATCH
    SET @N_RETURN = ERROR_NUMBER();
	SET @V_RETURN = ERROR_MESSAGE();
	PRINT @V_RETURN
	ROLLBACK TRAN;
END CATCH
GO
