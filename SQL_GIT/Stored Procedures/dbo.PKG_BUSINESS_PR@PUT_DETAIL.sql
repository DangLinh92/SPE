SET QUOTED_IDENTIFIER ON
GO
SET ANSI_NULLS ON
GO
CREATE PROC [dbo].[PKG_BUSINESS_PR@PUT_DETAIL](
@A_DATA         [dbo].[PR_DETAIL_TYPE1] READONLY,
@A_DATE         NVARCHAR(50),
@A_PR_CODE      NVARCHAR(50),
@A_STATUS       NVARCHAR(50),
@A_MRP_CODE     NVARCHAR(50),
@A_DATE_NEED_FINISH  NVARCHAR(50),
@A_TOTAL_VALUE_VN   NVARCHAR(50),
@A_TOTAL_VALUE_USD  NVARCHAR(50),
@A_PURPOSE_OF_BUY  NVARCHAR(1000),
@A_DEPARTMENT		NVARCHAR(50),
@A_USER             NVARCHAR(50),
@N_RETURN			int				OUTPUT,
@V_RETURN			NVARCHAR(4000)	OUTPUT
)
AS

BEGIN TRY
		BEGIN
		    SET NOCOUNT OFF;  
			DECLARE @CHECK_PR INT = 0;
			SELECT @CHECK_PR =COUNT(*)
			FROM [dbo].[EWIP_PURCHASE_REQUEST]
			WHERE PR_CODE = @A_PR_CODE AND DEPT_CODE = @A_DEPARTMENT

			BEGIN TRAN
			IF @CHECK_PR > 0
				 BEGIN
				 		 UPDATE [dbo].[EWIP_PURCHASE_REQUEST]
				 		 SET MRP_CODE = @A_MRP_CODE, PR_STATUS = @A_STATUS,TOTAL_VALUE = CAST(@A_TOTAL_VALUE_VN AS float),
				 		      TOTAL_VALUE_US = CAST(@A_TOTAL_VALUE_USD AS float),DATE_NEED_FINISH = CAST(@A_DATE_NEED_FINISH AS date),
				 		      PURPOSE_OF_BUYING =@A_PURPOSE_OF_BUY,USER_UPDATE = @A_USER,DATE_UPDATE = GETDATE()
				 		  WHERE PR_CODE = @A_PR_CODE AND DEPT_CODE = @A_DEPARTMENT
				  END
			 ELSE
			     BEGIN
						 INSERT INTO [dbo].[EWIP_PURCHASE_REQUEST]
						 VALUES(GETDATE(),@A_PR_CODE,@A_STATUS,@A_MRP_CODE,CAST(@A_TOTAL_VALUE_VN AS float), CAST(@A_DATE_NEED_FINISH AS date),NULL,@A_DEPARTMENT,@A_PURPOSE_OF_BUY,@A_USER,NULL,NULL,CAST(@A_TOTAL_VALUE_USD AS float))
				 END

              IF EXISTS(SELECT TOP 1 * FROM  [dbo].[EWIP_PURCHASE_REQUEST_DETAIL] WHERE  PR_CODE = @A_PR_CODE AND DEPT_CODE = @A_DEPARTMENT)
			    BEGIN
					DELETE FROM  [dbo].[EWIP_PURCHASE_REQUEST_DETAIL]
					WHERE  PR_CODE = @A_PR_CODE AND DEPT_CODE = @A_DEPARTMENT
				END
			  ELSE
			     BEGIN
					  DELETE FROM  [dbo].[EWIP_PURCHASE_REQUEST_DETAIL]
					  WHERE  MRP_CODE = @A_MRP_CODE AND DEPT_CODE = @A_DEPARTMENT
				 END

				INSERT INTO [dbo].[EWIP_PURCHASE_REQUEST_DETAIL]
				SELECT MRP_CODE,
				       SPAREPART_CODE,
					   DEPT_CODE,
					   CAST(QUANTITY_NEED_BUY AS float),
					   UNIT,
					   CAST(EXPECTED_PRICE_VN AS float),
					   CAST(PRICE_VN AS float),
					   CAST(TOTAL_MONEY_VN AS float),
					   VENDOR_ID,
				       PR_CODE,
					   CAST(DATE_NEED_FINISH AS date),
					   USER_UPDATE,CAST(DATE_UPDATE AS date),
					   CAST(DATE_CREATE AS date),
					   @A_STATUS,
					   CAST(EXPECTED_PRICE_US AS float),
					   CAST(PRICE_US AS float),
					   CAST(TOTAL_MONEY_US AS float)
				FROM @A_DATA
				WHERE [IS_DELETE] = '0'

				-- UPDATE FOR ITEM NO DELETE
				MERGE [dbo].[EWIP_MRP] AS TARGET
				USING @A_DATA AS SOURCE
				ON (
				     TARGET.ID = CAST(SOURCE.STT_MRP AS INT)
					)
				WHEN MATCHED AND (SOURCE.[IS_DELETE] = '0'  OR SOURCE.[IS_DELETE] IS NULL)
				   THEN UPDATE SET TARGET.[QUANTITY_NEED_BUY] = CAST(SOURCE.QUANTITY_NEED_BUY AS FLOAT) , TARGET.[UNIT] = SOURCE.UNIT ,TARGET.[STATUS] = @A_STATUS,TARGET.[DATE_NEED_FINISH] = SOURCE.DATE_NEED_FINISH,TARGET.[USER_UPDATE] = @A_USER,TARGET.[DATE_UPDATE] = GETDATE();

				   -- UPDATE FOR ITEM DELETE
				MERGE [dbo].[EWIP_MRP] AS TARGET
				USING @A_DATA AS SOURCE
				ON (
				     TARGET.ID = CAST(SOURCE.STT_MRP AS INT)
					)
			    WHEN MATCHED AND SOURCE.[IS_DELETE] = '1'
				     THEN UPDATE SET TARGET.[MRP_CODE] = NULL,TARGET.[DATE_UPDATE] = GETDATE(), TARGET.[USER_UPDATE] = @A_USER,TARGET.[STATUS] = null;

			   IF exists(SELECT TOP 1 * FROM  [dbo].[EWIP_MRP_LIST] WHERE [DEPT_CODE] = @A_DEPARTMENT AND [MRP_CODE] = @A_MRP_CODE)
			     BEGIN
						UPDATE [dbo].[EWIP_MRP_LIST]
						SET [STATUS] = @A_STATUS,[DATE_NEED_FINISH] =@A_DATE_NEED_FINISH,[USER_UPDATE] = @A_USER,[DATE_UPDATE] = GETDATE()
						WHERE [DEPT_CODE] = @A_DEPARTMENT AND [MRP_CODE] = @A_MRP_CODE 
				 END

				IF @A_STATUS = 'COMPLETE'
				   BEGIN
						UPDATE EWIP_ORDER_PR
						SET STATUS = 'COMPLETE'
						WHERE PR_CODE = @A_PR_CODE AND DEPT_CODE = @A_DEPARTMENT
				   END

       END
	SET @N_RETURN = 0;
	SET @V_RETURN = 'MSG_COM_004';
	COMMIT TRAN
END TRY
	BEGIN CATCH
  SET @N_RETURN = ERROR_NUMBER();
  SET @V_RETURN = ERROR_MESSAGE();
  ROLLBACK TRAN
END CATCH
GO
